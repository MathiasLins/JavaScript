Data Types

principais tipo primitivos

number

string


exemplo de utilização do script dentro do HTML5


dentro do body vai ter a seguinte tag:


<script>
	
var nome = window.promt('Qual o seu nome?') - Comando usado para fazer perguntas
window.alert('É um grande prazer em te conhecer, ' + nome + '!') - contanenação unindo um alerta + a variavel 


<script>

window.promt sempre ira retornar um valor em string, então quando for adição será necessário fazer a conversão para number

a conversão pode ser feita utilizando os seguintes comandos:

number.parseInt(n) - inteiros
number.parseFloat(n) - quebrados

UTILIZAR o 'Number(n)' pois o JS decida qual vai ser o valor


para converter de numero > string


string(n)

n.toString()

S{s} - usa template string

var s = 'JavaScript'

s.length - quantas caracteres a string tem
s.toUpperCase() - tudo para maiusculas
s.toLowerCase() - tudo para a minuscula


document.write('')

mais casas nos numeros quebrados:

n1.toFixed(2) - vai adicionar 2 casas

n1.toFixed(2).replace

n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'}


Operadores

aritmeticos= +, -, *, /, %, **
() - o parenteses muda a ordem de precedencia dos calculos, ex: 5 + 3 / 2 - aqui a divisão é priorizada, se você colocar (5 + 3) / 2 a soma vai ter prioridade

ordem de precendencia
()

**

*, /, %

+, -
  
simplificação: num = 8

num += 8 recebe 10
num %=2 recebe 0

incrimento 
var n = 10
n++ recebe 10
n recebe 11
n--
n recebe 10

atribuição -

relacionais -
> - maior
< - menor
>= - maior ou igual
<= - menor ou igual
== - igual
!= - não igual (diferente)


logicos -

! - negação (true ou false)
&& - conjunção (possuiu dois valores e os dois precisam ser igual para dar um resultado bom)
|| - disjunção (apenas um dos resultados precisa ser verdadeiro para ter um bom resultado)


ternario -

? - 
: -

teste ? true : false

media >= 7.0 ? "Aprovado" : "Reprovado" 


anotações sobre calculos:

supondo que x recebe 5, o calculo abaixo é realizado da seguinte maneira:

x %= 2
x = 5 % 2 = 1

o resultado é 1 porque a conta é realizada com divisão:

5 dividido por 2 = sobra 1


Operadores de Comparação:

== (igualdade - compara apenas o valor):

- Compara dois valores e faz conversão de tipos automatica se forem diferentes.

ex: 5 == '5' // true, pois o java converte a string '5' para numero 5 automaticamente.



=== (estritamente igual - valor e tipo):

- Compara valor e tipo sem converter nada.

ex: 5 === '5' // False, por que lê como uma string

5 === 5 // true, tipos e valores iguais



!= (Diferente - compara valor)

- Compara se os valores são diferentes, convertendo tipos se necessário.

ex: 5 != '5' //False, pois 5 == '5' após conversão

0 != false //False, porque ambos são considerados iguais



!== (estritamente diferente - valor e tipo)

- Retorna 'true' se valores ou tipos forem diferentes, sem conversão.

ex: 5 !== '5' //true (número e string)

5 !== 5 //false 

false !==0 //true



> (maior que)


< (menor que)


>= (maior ou igual)


<= (menor ou igual)



O javaScript tenta converter automaticamente os tipos nas comparações que possuem ' == ', ' != ', ' > ', ' < ', etc.





-------------------------------------------------------------------------------

Document Objetc Movel: 

Arvore Dom: 

	    Window
	       |
location / document / history
	       |
	   document	
	       |
	   head / body
	   /	   \
meta / title -	 h1 / p / p / div
			\
			strog

Selecionando: 
por Marca : getElementsByTagName()
por ID:  
por Nome
por Classe
por Seletor 

Manipulando o Dom: 


eventos de mouse:

mouseenter = entrou na div

mousemove = movendo dentro da div

mousedown = segurar a div

mouseup = soltar a div

click = clicar na div

mouseout = mover para fora da div


Função:

function ação(parametros){}

ex:
<div id="area" onclick="clicar()">

</div>



principais objetos e metodos do DOM

-O objeto raiz. representa o documento inteiro.

-Métodos uteis:

document.getElementById(id)

document.getElementsByClassName(class)

document.getElementsByTagName(tag)

document.querySelector(selector)

document.querySelectorAll(selector)



Acessando elementos: 

| Método                        | Descrição                                 |
| ----------------------------- | ----------------------------------------- |
| `getElementById("id")`        | Retorna o elemento com o ID especificado. |
| `getElementsByClassName("x")` | Retorna uma coleção de elementos.         |
| `getElementsByTagName("tag")` | Retorna todos os elementos da tag.        |
| `querySelector(".classe")`    | Retorna o **primeiro** elemento que bate. |
| `querySelectorAll(".classe")` | Retorna **todos** os elementos.           |


Manipulando Conteudo:

| Propriedade / Método     | Descrição                             |
| ------------------------ | ------------------------------------- |
| `element.innerHTML`      | Lê ou altera o **HTML interno**.      |
| `element.innerText`      | Lê ou altera o **texto visível**.     |
| `element.textContent`    | Lê ou altera o texto (inclui oculto). |
| `element.setAttribute()` | Define um atributo.                   |
| `element.getAttribute()` | Obtém o valor de um atributo.         |
| `element.remove()`       | Remove o elemento do DOM.             |


Lista de eventos comuns: 

| Evento      | Ocorre quando...               |
| ----------- | ------------------------------ |
| `click`     | o usuário clica em algo        |
| `mouseover` | o mouse passa sobre o elemento |
| `keydown`   | uma tecla é pressionada        |
| `submit`    | um formulário é enviado        |
| `load`      | a página é carregada           |






























